name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest

    steps:
      # Étape 1 : Vérifier le code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Étape 2 : Configurer Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Étape 3 : Construire et pousser les images Docker
      - name: Build and Push LLM Service Image
        run: |
          docker build -t mgn94/infrastructure-rag-llm:llm-service-latest -f dockerfile.rag_llm .
          docker push mgn94/infrastructure-rag-llm:llm-service-latest

      - name: Build and Push API Service Image
        run: |
          docker build -t mgn94/infrastructure-rag-llm:api-service-latest -f dockerfile.api .
          docker push mgn94/infrastructure-rag-llm:api-service-latest

      - name: Build and Push Frontend Service Image
        run: |
          docker build -t mgn94/infrastructure-rag-llm:frontend-service-latest -f dockerfile.frontend .
          docker push mgn94/infrastructure-rag-llm:frontend-service-latest

      - name: Build and Push Chroma Service Image
        run: |
          docker build -t mgn94/infrastructure-rag-llm:chroma-service-latest -f dockerfile.chroma .
          docker push mgn94/infrastructure-rag-llm:chroma-service-latest

  deploy-infra:
    name: Deploy Infrastructure with Terraform
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      # Étape 1 : Vérifier le code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Étape 2 : Installer Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      # Étape 3 : Initialiser Terraform
      - name: Terraform Init
        run: terraform init
        working-directory: terraform/

      # Étape 4 : Planifier l'infrastructure
      - name: Terraform Plan
        run: terraform plan -out=tfplan
        working-directory: terraform/
        env:
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # Étape 5 : Appliquer l'infrastructure
      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan
        working-directory: terraform/
        env:
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

  deploy-app:
    name: Deploy Applications to AKS
    runs-on: ubuntu-latest
    needs: deploy-infra

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f kubernetes-manifests/ # Adapter selon vos manifests YAML
